import string
import math
from getpass import getpass

def assess_password(password):
    """Return (score, label, reasons_list). Score is 0..100."""
    if password is None:
        return 0, "Weak", ["no password provided"]

    length = len(password)
    has_upper = any(c.isupper() for c in password)
    has_lower = any(c.islower() for c in password)
    has_digit = any(c.isdigit() for c in password)
    has_special = any(c not in string.ascii_letters + string.digits for c in password)

    pool = 0
    if has_lower:
        pool += 26
    if has_upper:
        pool += 26
    if has_digit:
        pool += 10
    if has_special:
        pool += 32

    if pool > 0:
        entropy_bits = length * math.log2(pool)
    else:
        entropy_bits = 0

    score = max(0, min(100, int((entropy_bits / 60.0) * 100)))

    reasons = []
    if length < 8:
        reasons.append("too short (min 8 chars recommended)")
    if not (has_lower or has_upper):
        reasons.append("no letters")
    if not has_digit:
        reasons.append("missing digits")
    if not has_special:
        reasons.append("missing special characters")
   
    if entropy_bits >= 50 and length >= 12 and has_upper and has_lower and has_digit and has_special:
        label = "Strong"
    elif entropy_bits >= 30 and length >= 8:
        label = "Medium"
    else:
        label = "Weak"

    return score, label, reasons

if __name__ == "__main__":
    while True:
        pwd = getpass("Enter a password (or blank to exit): ")
        if not pwd:
            break
        score, label, reasons = assess_password(pwd)
        print(f"Score: {score}/100\tLabel: {label}")
        if reasons:
            print("Notes:", "; ".join(reasons))
        else:
            print("No issues detected (still consider using a passphrase).")

